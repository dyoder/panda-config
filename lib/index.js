// Generated by CoffeeScript 1.10.0
(function() {
  var Method, async, create, defaults, exists, isJSON, isYAML, join, liftAll, load, merge, path, read, ref, ref1, resolve, save, write;

  ref = require("path"), resolve = ref.resolve, join = ref.join;

  liftAll = require("when/node").liftAll;

  ref1 = require("fairmont"), read = ref1.read, write = ref1.write, exists = ref1.exists, merge = ref1.merge, async = ref1.async, Method = ref1.Method;

  defaults = {
    paths: ["."],
    prefix: "",
    extension: "",
    format: "yaml"
  };

  create = function(configuration) {
    return merge(defaults, configuration);
  };

  path = async(function*(arg) {
    var basename, directory, extension, format, fullPath, i, len, name, paths, prefix;
    paths = arg.paths, prefix = arg.prefix, extension = arg.extension, format = arg.format, name = arg.name;
    basename = "" + prefix + name + extension;
    for (i = 0, len = paths.length; i < len; i++) {
      directory = paths[i];
      fullPath = resolve(directory, basename);
      if ((yield exists(fullPath))) {
        return fullPath;
      }
    }
    throw new Error("Unable to find configuration file [" + basename + "].");
  });

  load = Method.create();

  save = Method.create();

  isYAML = function(arg) {
    var format;
    format = arg.format;
    return format === "yaml";
  };

  Method.define(load, isYAML, async(function*(configuration) {
    var YAML;
    YAML = require("js-yaml");
    return YAML.safeLoad((yield read((yield path(configuration)))));
  }));

  Method.define(save, isYAML, (function() {
    return true;
  }), async(function*(configuration, data) {
    var YAML;
    YAML = require("js-yaml");
    return (yield write((yield path(configuration)), YAML.safeDump(data)));
  }));

  isJSON = function(arg) {
    var format;
    format = arg.format;
    return format === "json";
  };

  Method.define(load, isJSON, async(function*(configuration) {
    var YAML;
    YAML = require("js-yaml");
    return JSON.parse((yield read((yield path(configuration)))));
  }));

  Method.define(save, isJSON, (function() {
    return true;
  }), async(function*(configuration, data) {
    return (yield write((yield path(configuration)), JSON.stringify(data, null, 2)));
  }));

  module.exports = {
    create: create,
    save: save,
    load: load
  };

}).call(this);
