// Generated by CoffeeScript 1.8.0
(function() {
  var Configuration, Configurator, async, exists, join, liftAll, merge, readFile, resolve, writeFile, _ref, _ref1;

  liftAll = require("when/node").liftAll;

  async = (require("when/generator")).lift;

  _ref = liftAll(require("fs")), readFile = _ref.readFile, writeFile = _ref.writeFile;

  exists = (function() {
    var lift;
    lift = require("when/callbacks").lift;
    return lift((require("fs")).exists);
  })();

  _ref1 = require("path"), resolve = _ref1.resolve, join = _ref1.join;

  merge = require("fairmont").merge;

  Configuration = (function() {
    function Configuration(_arg) {
      this.paths = _arg.paths, this.prefix = _arg.prefix, this.extension = _arg.extension, this.format = _arg.format, this.name = _arg.name;
    }

    Configuration.prototype.load = async(function*() {
      var directory, filename, path, read, _i, _len, _ref2;
      read = Configurator.formats[this.format].read;
      filename = "" + this.prefix + this.name + this.extension;
      _ref2 = this.paths;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        directory = _ref2[_i];
        path = resolve(join(directory, filename));
        if ((yield exists(path))) {
          this.data = read(((yield readFile(path))).toString());
          this.path = path;
          return this;
        }
      }
      throw new Error("Unable to find configuration named " + this.name);
    });

    Configuration.prototype.save = function() {
      var write;
      write = Configurator.formats[this.format].write;
      if ((this.path != null) && (this.data != null)) {
        return writeFile(this.path, write(this.data));
      } else {
        throw new Error("Unable to save configuration: no path or data");
      }
    };

    Configuration.prototype.prepare = function(path) {
      var directory, filename, _i, _len, _path, _ref2;
      filename = "" + this.prefix + this.name + this.extension;
      if (path != null) {
        _ref2 = this.paths;
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          directory = _ref2[_i];
          _path = resolve(join(directory, filename));
          if (path === _path) {
            this.path = path;
            return this;
          }
        }
        throw new Error("Invalid path provided");
      } else {
        directory = this.paths[0];
        return this.path = resolve(join(directory, filename));
      }
    };

    return Configuration;

  })();

  Configurator = (function() {
    Configurator.formats = {
      yaml: {
        read: function(string) {
          return (require("js-yaml")).safeLoad(string);
        },
        write: function(object) {
          return (require("js-yaml")).safeDump(object);
        }
      },
      json: {
        read: function(string) {
          return JSON.parse(string);
        },
        write: function(object) {
          return JSON.stringify(object);
        }
      }
    };

    Configurator.defaults = {
      paths: ["."],
      prefix: "",
      extension: "",
      format: "yaml"
    };

    Configurator.make = function(options) {
      return new Configurator(options);
    };

    function Configurator(options) {
      var _ref2;
      _ref2 = merge(Configurator.defaults, options), this.paths = _ref2.paths, this.prefix = _ref2.prefix, this.extension = _ref2.extension, this.format = _ref2.format;
    }

    Configurator.prototype.make = function(_arg) {
      var name;
      name = _arg.name;
      return new Configuration({
        paths: this.paths,
        prefix: this.prefix,
        extension: this.extension,
        format: this.format,
        name: name
      });
    };

    return Configurator;

  })();

  module.exports = Configurator;

}).call(this);
